import genAI from '../config/gemini.js';

const generateQuestion = async (topic, subtopic, difficulty, pastQuestions, questionNumbers) => {
  const model = genAI.getGenerativeModel({ model: "gemini-2.5-pro" });

  const prompt = `
  Eres una IA especializada en crear preguntas tipo prueba Saber PRO, el examen que se realiza a universitarios en Colombia para evaluar su nivel acad√©mico.
  Tu tarea es generar ${questionNumbers} preguntas de dificultad: ${difficulty} en formato JSON, siguiendo estrictamente esta estructura:
  {
    "statement": "Enunciado de la pregunta",
    "option_A": "Texto de la opci√≥n A",
    "option_B": "Texto de la opci√≥n B",
    "option_C": "Texto de la opci√≥n C",
    "option_D": "Texto de la opci√≥n D",
    "Correct_Answer": "Letra de la opci√≥n correcta (A, B, C o D)"
  }
  **Categor√≠a:** ${topic}  
  **Subcategor√≠a:** ${subtopic}  
  Si no tienes suficiente conocimiento sobre el tema, devuelve exactamente un JSON vac√≠o: '{}'.  
  A continuaci√≥n te dejo 5 ejemplos en el mismo formato para que los tomes como gu√≠a:  
  ${pastQuestions}  
  Devuelve solo el JSON, sin explicaciones ni texto adicional.
  `;
  const result = await model.generateContent(prompt);
  const response = await result.response.text();
  return response;
};

const evaluateQuestion = async (subject, question, answer) =>  {
  const model = genAI.getGenerativeModel({ model: "gemini-2.5-pro" });

  const prompt = `Eres una IA especializada en evaluar respuestas de un simulacro saber PRO, el ex√°men realizado a universitarios en Colombia para conocer su nivel acad√©mico.
  Tu tarea es evaluar la respuesta de un estudiante, la materia es :${subject} y la pregunta es: ${question}
  La respuesta es: ${answer}
  Como respuesta dame solo un formato JSON con 2 campos: "nota" y "retroalimentaci√≥n".
    "nota": Un valor del 1.0 al 5.0 con m√°ximo 2 d√©cimales, seg√∫n la calidad, precisi√≥n, argumentaci√≥n y claridad de la respuesta.
    "retroalimentaci√≥n": un texto de entre 20 y 100 palabras donde expliques de manera cr√≠tica y asertiva que aspectos podr√≠a mejorar o reforzar el estudiante.
    No incluyas explicaciones adicionales fuera del JSON.
  `;

  const result = await model.generateContent(prompt);
  const response = await result.response.text();
  return response;
};

const retroalimentateTest = async (test) => {
  const model = genAI.getGenerativeModel({ model: "gemini-2.5-pro" });

  const prompt = `
  Eres una inteligencia artificial especializada en evaluar respuestas de simulacros del examen Saber PRO, una prueba estandarizada aplicada a universitarios en Colombia para medir competencias gen√©ricas y espec√≠ficas.
  Tu tarea es analizar el siguiente conjunto de respuestas, que se encuentra en formato JSON:
  ${test}
  Genera una retroalimentaci√≥n escrita en un tono acad√©mico y constructivo, de m√°ximo 500 palabras. En tu an√°lisis, identifica los puntos fuertes y d√©biles del desempe√±o evidenciado en la prueba. Puedes referirte a aspectos como comprensi√≥n lectora, razonamiento cuantitativo, comunicaci√≥n escrita, competencias ciudadanas, o cualquier otra √°rea evaluada seg√∫n el contenido del JSON.
  Si lo consideras pertinente, incluye 1 o 2 recursos de apoyo, en forma de links v√°lidos y completos (por ejemplo, p√°ginas web reconocidas o videos de YouTube).
  ‚ö†Ô∏è Importante: si no puedes garantizar que un enlace sea real y vigente, no inventes ninguno.
  No incluyas encabezados ni repitas el contenido del JSON. Solo entrega el an√°lisis como un texto continuo.
  `;
  const result = await model.generateContent(prompt);
  const response = await result.response.text();
  return response;
};

// --- FUNCI√ìN NUEVA Y NECESARIA ---
const evaluateWrittenCommunication = async (studentText) => {
  const model = genAI.getGenerativeModel({ model: "gemini-2.5-pro" });

  const prompt = `
  Eres un experto evaluador de ensayos para la prueba Saber PRO de Colombia, especializado en el m√≥dulo de Comunicaci√≥n Escrita.
  Tu tarea es analizar el siguiente texto escrito por un estudiante:
  ---
  ${studentText}
  ---
  Proporciona tu evaluaci√≥n estrictamente en formato JSON, con la siguiente estructura y sin texto adicional antes o despu√©s:
  {
    "score": "Un puntaje num√©rico entero entre 0 y 300",
    "feedback": "Una retroalimentaci√≥n constructiva y detallada de m√°ximo 250 palabras, explicando las fortalezas y debilidades del texto y c√≥mo podr√≠a mejorarlo. El tono debe ser acad√©mico y orientador."
  }
  `;

  try {
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const rawText = response.text();
    console.log("ü§ñ Raw response from Gemini:", rawText);

    const regex = /```json\n([\s\S]*?)\n```/;
    const match = rawText.match(regex);
    let jsonToParse = rawText;

    if (match && match[1]) {
      jsonToParse = match[1].trim();
    } else {
      const jsonStartIndex = rawText.indexOf('{');
      const jsonEndIndex = rawText.lastIndexOf('}');
      if (jsonStartIndex !== -1 && jsonEndIndex !== -1) {
        jsonToParse = rawText.substring(jsonStartIndex, jsonEndIndex + 1);
      }
    }
    return JSON.parse(jsonToParse);
  } catch (error) {
    console.error("‚ùå Error en la llamada a Gemini o al parsear la respuesta:", error.message);
    return {
      score: 0,
      feedback: "No se pudo generar la retroalimentaci√≥n de la IA en este momento. Es posible que se haya alcanzado un l√≠mite de uso o que el contenido haya sido bloqueado. Por favor, int√©ntalo de nuevo m√°s tarde."
    };
  }
};


// --- EXPORTACI√ìN CORREGIDA ---
// Ahora incluye la nueva funci√≥n
export { generateQuestion, evaluateQuestion, retroalimentateTest, evaluateWrittenCommunication };